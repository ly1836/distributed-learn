<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.4.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.sz.earlysummer</groupId>
    <artifactId>sms-bombing</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>sms-bombing</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
        <docker.host>http://192.168.0.155</docker.host>
        <docker.repostory>192.168.0.155</docker.repostory>
        <docker.registry.name>background</docker.registry.name>

        <!-- 跳过 -->
        <jib.skip>false</jib.skip>
        <!-- 基础镜像 -->
        <jib.base.img>java:8</jib.base.img>
        <!-- 启动参数设置 -->
        <jib.entrypoint>
            java $JAVA_OPTS \
            $JVM_OPTS \
            -Djava.security.egd=file:/app/./urandom -Dfile.encoding=UTF-8 -Dserver.port=$SERVER_PORT \
            -Dspring.profiles.active=$ACTIVE \
            -cp /app/resources:/app/classes:/app/libs/* com.gt.FoodmanagerApplication
        </jib.entrypoint>
        <!--
            默认设定JVM的参数
            参数解释：
            -XX:+PrintGCDateStamps 打印GC的时间戳
            -XX:+PrintGCDetails  打印GC的明细信息
            -XX:+PrintGCApplicationStoppedTime 打印GC期间程序暂停的时间
            -XX:+PrintCommandLineFlags 打印已经设置过的详细JVM参数值
            -XX:+HeapDumpOnOutOfMemoryError 内存溢出时生成堆转储快照文件
            -Xloggc:/app/heapdump/heap_trace.log GC的日志路径
            -XX:HeapDumpPath=/app/heapdump 生成堆转储快照文件所在的目录
            -XX:-OmitStackTraceInFastThrow 大量抛出重复异常的时候打印完整的异常链信息
        -->
        <jib.env.jvm_opts>
            -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCApplicationStoppedTime -XX:+PrintCommandLineFlags
            -XX:+HeapDumpOnOutOfMemoryError -Xloggc:/app/heapdump/heap_trace.log -XX:HeapDumpPath=/app/heapdump
            -XX:-OmitStackTraceInFastThrow
        </jib.env.jvm_opts>
        <jib.maintainer>leiyang="491816301@qq.com"</jib.maintainer>
        <!-- 默认的激活配置文件 -->
        <jib.env.active>dev</jib.env.active>
        <!-- 默认的端口 -->
        <jib.env.server_port>4567</jib.env.server_port>
        <!-- 时区 -->
        <jib.env.tz>Asia/Shanghai</jib.env.tz>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.47</version>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.4</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!--&lt;!&ndash;使用jib插件&ndash;&gt;
            <plugin>
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>jib-maven-plugin</artifactId>
                <version>1.2.0</version>
                <configuration>
                    &lt;!&ndash;from节点用来设置镜像的基础镜像，相当于Docerkfile中的FROM关键字&ndash;&gt;
                    <from>
                        &lt;!&ndash;使用openjdk官方镜像，tag是8-jdk-stretch，表示镜像的操作系统是debian9,装好了jdk8&ndash;&gt;
                        <image>${jib.base.img}</image>
                    </from>
                    &lt;!&ndash;容器相关的属性&ndash;&gt;
                    <container>
                        <workingDirectory>/app</workingDirectory>
                        <environment>
                            &lt;!&ndash; 时区 &ndash;&gt;
                            <TZ>${jib.env.tz}</TZ>
                            &lt;!&ndash; 默认启动配置文件 dev &ndash;&gt;
                            <ACTIVE>${jib.env.active}</ACTIVE>
                            <SERVER_PORT>${jib.env.server_port}</SERVER_PORT>
                            <JVM_OPTS>${jib.env.jvm_opts}</JVM_OPTS>
                        </environment>
                        <useCurrentTimestamp>true</useCurrentTimestamp>
                        <entrypoint>
                            <arg>/bin/sh</arg>
                            <arg>-c</arg>
                            <arg>${jib.entrypoint}</arg>
                        </entrypoint>
                        &lt;!&ndash;要暴露的端口&ndash;&gt;
                        <ports>
                            <port>${jib.env.server_port}</port>
                        </ports>
                        <volumes>
                            <volume>/app/logs</volume>
                            <volume>/app/heapdump</volume>
                        </volumes>
                    </container>
                    &lt;!&ndash;用没配置安全认证的registry&ndash;&gt;
                    <allowInsecureRegistries>true</allowInsecureRegistries>
                </configuration>
            </plugin>-->

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.1.7.RELEASE</version>
            </plugin>

            <!-- 添加docker-maven-plugin插件 -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.0</version>
                <configuration>
                    <!--<imageName>${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}</imageName>-->
                    <!-- 指定Dockerfile所在的路径 -->
                    <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
                    <dockerHost>${docker.host}</dockerHost>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                    <serverId>docker-harbor</serverId>
                    <pushImage>true</pushImage>
                    <retryPushTimeout>10</retryPushTimeout>
                </configuration>
            </plugin>
        </plugins>



        <defaultGoal>package</defaultGoal>
        <!-- 如果不添加此节点mybatis的mapper.xml文件都会被漏掉。 -->
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.yml</include>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.yml</include>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>false</filtering>
            </resource>

            <!-- 打包时将jsp文件拷贝到META-INF目录下-->
            <resource>
                <!-- 指定resources插件处理哪个目录下的资源文件 -->
                <directory>src/main/webapp</directory>
                <!--注意此次必须要放在此目录下才能被访问到-->
                <targetPath>META-INF/resources</targetPath>
                <includes>
                    <include>**/**</include>
                </includes>
            </resource>

        </resources>
    </build>

</project>
