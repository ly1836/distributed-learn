<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.6.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.sz.earlysummer</groupId>
    <artifactId>sms-bombing</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>sms-bombing</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
        <!--<docker.host>http://192.168.0.155:2375</docker.host>
        <docker.repostory>192.168.0.155</docker.repostory>
        <docker.repostory.port>2375</docker.repostory.port>
        <docker.registry.name>background</docker.registry.name>-->
        <!-- 这里的参数由CI文件中maven构建命令中传递赋值 -->
        <docker.imange.name>docker-images-name</docker.imange.name>
        <!--
            默认设定JVM的参数
            参数解释：
            -XX:+PrintGCDateStamps 打印GC的时间戳
            -XX:+PrintGCDetails  打印GC的明细信息
            -XX:+PrintGCApplicationStoppedTime 打印GC期间程序暂停的时间
            -XX:+PrintCommandLineFlags 打印已经设置过的详细JVM参数值
            -XX:+HeapDumpOnOutOfMemoryError 内存溢出时生成堆转储快照文件
            -Xloggc:/app/heapdump/heap_trace.log GC的日志路径
            -XX:HeapDumpPath=/app/heapdump 生成堆转储快照文件所在的目录
            -XX:-OmitStackTraceInFastThrow 大量抛出重复异常的时候打印完整的异常链信息
        -->
        <jvm_opts>
            -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCApplicationStoppedTime -XX:+PrintCommandLineFlags \
            -XX:+HeapDumpOnOutOfMemoryError -Xloggc:/app/heapdump/heap_trace.log -XX:HeapDumpPath=/app/heapdump \
            -XX:-OmitStackTraceInFastThrow
        </jvm_opts>
        <!-- 启动参数设置 -->
        <docker.entrypoint>
            ${jvm_opts} \
            -Djava.security.egd=file:/app/./urandom -Dfile.encoding=UTF-8 \
            -Dserver.port=$SERVER_PORT -Denv=$APLLO_DENV
        </docker.entrypoint>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.47</version>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.4</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-context</artifactId>
            <version>2.0.1.RELEASE</version>
        </dependency>

        <dependency>
            <groupId>com.ctrip.framework.apollo</groupId>
            <artifactId>apollo-client</artifactId>
            <version>1.7.0</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.1.7.RELEASE</version>
            </plugin>

            <!-- 添加docker-maven-plugin插件 -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.0</version>
                <configuration>
                    <imageName>${docker.imange.name}</imageName>
                    <baseImage>java:8</baseImage>
                    <serverId>my-docker-registry</serverId>
                    <maintainer>leiyang753@gmail.com</maintainer>
                    <workdir>/app</workdir>
                    <cmd>["java", "-version"]</cmd>
                    <entryPoint>["sh","-c","java ${docker.entrypoint} -jar ${project.build.finalName}.jar"]</entryPoint>
                    <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
                    <resources>
                        <resource>
                            <targetPath>/app</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
                <executions>
                    <execution>
                        <id>build-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>tag-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>tag</goal>
                        </goals>
                        <configuration>
                            <image>${docker.imange.name}</image>
                            <newName>${docker.imange.name}</newName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>push-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                        <configuration>
                            <imageName>${docker.imange.name}</imageName>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>


        <defaultGoal>package</defaultGoal>
        <!-- 如果不添加此节点mybatis的mapper.xml文件都会被漏掉。 -->
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.yml</include>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.yml</include>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>false</filtering>
            </resource>

            <!-- 打包时将jsp文件拷贝到META-INF目录下-->
            <resource>
                <!-- 指定resources插件处理哪个目录下的资源文件 -->
                <directory>src/main/webapp</directory>
                <!--注意此次必须要放在此目录下才能被访问到-->
                <targetPath>META-INF/resources</targetPath>
                <includes>
                    <include>**/**</include>
                </includes>
            </resource>

        </resources>
    </build>

</project>
